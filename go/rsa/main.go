package main

import (
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"io/ioutil"
)

func main() {
	//example1()
	example2()
}

func example1() {
	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		panic(err)
	}
	publicKey := privateKey.PublicKey

	encryptedBytes, err := rsa.EncryptOAEP(
		sha256.New(),
		rand.Reader,
		&publicKey,
		[]byte("super secret message"),
		nil)
	if err != nil {
		panic(err)
	}

	fmt.Println("encrypted bytes: ", encryptedBytes)

	decryptedBytes, err := privateKey.Decrypt(nil, encryptedBytes, &rsa.OAEPOptions{Hash: crypto.SHA256})
	if err != nil {
		panic(err)
	}

	fmt.Println("decrypted message: ", string(decryptedBytes))
}

func example2() {
	b, err := ioutil.ReadFile("1024_RSA_KEY.pem")
	// b, err := ioutil.ReadFile("2048_RSA_KEY.pem")
	if err != nil {
		panic(err)
	}

	block, _ := pem.Decode(b)

	// fmt.Println(x509.IsEncryptedPEMBlock(block))

	key, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	if err != nil {
		panic(err)
	}
	// fmt.Println(key)

	// ct := []byte{
	// 	0x9a, 0xfc, 0x13, 0xb0, 0xad, 0x3b, 0xd1, 0xe0, 0xfd, 0x68,
	// 	0x54, 0xba, 0xae, 0x15, 0x8a, 0x57, 0xcf, 0x86, 0x29, 0x91,
	// 	0x97, 0x9f, 0x25, 0x47, 0xb5, 0x2e, 0x44, 0x09, 0x2b, 0x00,
	// 	0xf7, 0xa3, 0xb2, 0x10, 0x25, 0x8c, 0xd4, 0xa4, 0xf6, 0x12,
	// 	0x2c, 0x01, 0xf2, 0x39, 0x62, 0x40, 0x13, 0xd6, 0x22, 0x40,
	// 	0xed, 0x78, 0x87, 0x1b, 0xbb, 0x1f, 0x82, 0x58, 0x63, 0x75,
	// 	0xce, 0xd3, 0xfc, 0xd5, 0xaa, 0x4b, 0xa4, 0x1c, 0x36, 0x00,
	// 	0xc3, 0x5c, 0x2b, 0x70, 0xc4, 0x25, 0x38, 0xfa, 0xcf, 0x08,
	// 	0x29, 0x56, 0xd0, 0xe7, 0x92, 0x0c, 0xb4, 0xfd, 0xdc, 0x79,
	// 	0x22, 0x6c, 0xd7, 0x93, 0x3a, 0x68, 0x3a, 0x55, 0x9b, 0x1a,
	// 	0x5b, 0x80, 0xa3, 0xda, 0x53, 0x5e, 0x83, 0x70, 0xce, 0xa5,
	// 	0x7c, 0xcc, 0x1a, 0x6c, 0x61, 0x77, 0x10, 0xf5, 0x89, 0xe9,
	// 	0xe0, 0x4e, 0xe1, 0x83, 0x82, 0xc9, 0x89, 0xa2, 0xa1, 0x57,
	// 	0xde, 0x28, 0xbc, 0x14, 0x2b, 0x45, 0xa5, 0x96, 0x6c, 0x86,
	// 	0x5c, 0xc7, 0xd2, 0x55, 0x80, 0x4f, 0x4d, 0x8d, 0xba, 0x88,
	// 	0xa1, 0x60, 0xcc, 0xf6, 0xe6, 0x52, 0x1b, 0x11, 0x37, 0x3b,
	// 	0x18, 0x2c, 0x88, 0x70, 0x59, 0x85, 0x54, 0xbd, 0x4a, 0x62,
	// 	0xab, 0x1a, 0xb0, 0x62, 0xe8, 0xdb, 0x3a, 0xcf, 0x80, 0x92,
	// 	0x71, 0x30, 0xff, 0x17, 0x11, 0x62, 0xd4, 0x94, 0xa3, 0x14,
	// 	0x6a, 0xf4, 0xe2, 0x81, 0xa8, 0x14, 0x1c, 0xdb, 0x25, 0x60,
	// 	0x4b, 0x56, 0x30, 0x80, 0xfb, 0x32, 0xa6, 0x33, 0x79, 0x8b,
	// 	0xe7, 0x81, 0x6b, 0xd1, 0xaa, 0x4f, 0xd7, 0xa7, 0x5f, 0xcd,
	// 	0x3a, 0x62, 0x11, 0xab, 0x72, 0x19, 0x46, 0xc8, 0xee, 0xc5,
	// 	0xa0, 0x66, 0x53, 0x26, 0xfd, 0x2e, 0x9c, 0x4b, 0x06, 0xbb,
	// 	0x56, 0x66, 0x6b, 0xb8, 0xaf, 0xa9, 0xdb, 0x54, 0x1e, 0x66,
	// 	0x17, 0xfb, 0x68, 0x1f, 0xb4, 0xc2,
	// }
	ct := []byte{
		0x6f, 0xf8, 0x0e, 0x2e, 0x3f, 0xe3, 0xf0, 0x9f, 0xfe, 0x48,
		0x15, 0x4b, 0x13, 0xac, 0x14, 0x6c, 0xc5, 0x6c, 0x83, 0x3f,
		0xab, 0x72, 0x04, 0x91, 0x86, 0xcb, 0xac, 0x48, 0x44, 0xbe,
		0xf3, 0xcb, 0x33, 0xef, 0xde, 0x91, 0xe8, 0x40, 0xd3, 0xbe,
		0xe6, 0x0c, 0x25, 0xfb, 0x8d, 0x00, 0xdf, 0x0f, 0xe9, 0xe3,
		0x54, 0x1f, 0xea, 0x0b, 0xf3, 0x12, 0xa8, 0xa5, 0xb0, 0xb9,
		0x29, 0xfd, 0x0b, 0x55, 0xbf, 0xa0, 0xa8, 0xac, 0x01, 0x3a,
		0xf2, 0xd7, 0xce, 0x7c, 0xe6, 0x20, 0xc1, 0xc3, 0x66, 0x7c,
		0x1d, 0x0a, 0x9f, 0x4e, 0x60, 0xda, 0x97, 0x2b, 0x67, 0xd6,
		0x63, 0xb6, 0x2c, 0x34, 0x1c, 0x89, 0xff, 0xff, 0xa3, 0x0c,
		0xd3, 0x44, 0x18, 0xdf, 0x23, 0x71, 0x94, 0x07, 0xfb, 0xf7,
		0xef, 0xdc, 0xbf, 0xbb, 0x9a, 0xf5, 0xe8, 0xdc, 0xf9, 0xb9,
		0x82, 0x79, 0xa7, 0x8e, 0x2b, 0x1d, 0x1a, 0xc6,
	}
	pt, err := key.Decrypt(rand.Reader, ct, nil)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(pt))
}
