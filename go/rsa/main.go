package main

import (
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"io/ioutil"
)

func main() {
	//example1()
	example2()
}

func example1() {
	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		panic(err)
	}
	publicKey := privateKey.PublicKey

	encryptedBytes, err := rsa.EncryptOAEP(
		sha256.New(),
		rand.Reader,
		&publicKey,
		[]byte("super secret message"),
		nil)
	if err != nil {
		panic(err)
	}

	fmt.Println("encrypted bytes: ", encryptedBytes)

	decryptedBytes, err := privateKey.Decrypt(nil, encryptedBytes, &rsa.OAEPOptions{Hash: crypto.SHA256})
	if err != nil {
		panic(err)
	}

	fmt.Println("decrypted message: ", string(decryptedBytes))
}

func example2() {
	b, err := ioutil.ReadFile("1024_RSA_KEY.pem")
	// b, err := ioutil.ReadFile("2048_RSA_KEY.pem")
	if err != nil {
		panic(err)
	}

	block, _ := pem.Decode(b)

	// fmt.Println(x509.IsEncryptedPEMBlock(block))

	key, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	if err != nil {
		panic(err)
	}
	// fmt.Println(key)
	pubKey := key.PublicKey
	fmt.Printf("N:\n%#v\n", pubKey.N.Bytes())
	fmt.Printf("e:\n%x\n", pubKey.E)
	fmt.Printf("d:\n%#v\n", key.D.Bytes())
	//fmt.Println(len(key.Primes))
	fmt.Printf("p:\n%#v\n", key.Primes[0].Bytes())
	fmt.Printf("q:\n%#v\n", key.Primes[1].Bytes())
	fmt.Printf("dP:\n%#v\n", key.Precomputed.Dp.Bytes())
	fmt.Printf("dQ:\n%#v\n", key.Precomputed.Dq.Bytes())
	fmt.Printf("qP:\n%#v\n", key.Precomputed.Qinv.Bytes())

	// ct := []byte{
	// 	0x9a, 0xfc, 0x13, 0xb0, 0xad, 0x3b, 0xd1, 0xe0, 0xfd, 0x68,
	// 	0x54, 0xba, 0xae, 0x15, 0x8a, 0x57, 0xcf, 0x86, 0x29, 0x91,
	// 	0x97, 0x9f, 0x25, 0x47, 0xb5, 0x2e, 0x44, 0x09, 0x2b, 0x00,
	// 	0xf7, 0xa3, 0xb2, 0x10, 0x25, 0x8c, 0xd4, 0xa4, 0xf6, 0x12,
	// 	0x2c, 0x01, 0xf2, 0x39, 0x62, 0x40, 0x13, 0xd6, 0x22, 0x40,
	// 	0xed, 0x78, 0x87, 0x1b, 0xbb, 0x1f, 0x82, 0x58, 0x63, 0x75,
	// 	0xce, 0xd3, 0xfc, 0xd5, 0xaa, 0x4b, 0xa4, 0x1c, 0x36, 0x00,
	// 	0xc3, 0x5c, 0x2b, 0x70, 0xc4, 0x25, 0x38, 0xfa, 0xcf, 0x08,
	// 	0x29, 0x56, 0xd0, 0xe7, 0x92, 0x0c, 0xb4, 0xfd, 0xdc, 0x79,
	// 	0x22, 0x6c, 0xd7, 0x93, 0x3a, 0x68, 0x3a, 0x55, 0x9b, 0x1a,
	// 	0x5b, 0x80, 0xa3, 0xda, 0x53, 0x5e, 0x83, 0x70, 0xce, 0xa5,
	// 	0x7c, 0xcc, 0x1a, 0x6c, 0x61, 0x77, 0x10, 0xf5, 0x89, 0xe9,
	// 	0xe0, 0x4e, 0xe1, 0x83, 0x82, 0xc9, 0x89, 0xa2, 0xa1, 0x57,
	// 	0xde, 0x28, 0xbc, 0x14, 0x2b, 0x45, 0xa5, 0x96, 0x6c, 0x86,
	// 	0x5c, 0xc7, 0xd2, 0x55, 0x80, 0x4f, 0x4d, 0x8d, 0xba, 0x88,
	// 	0xa1, 0x60, 0xcc, 0xf6, 0xe6, 0x52, 0x1b, 0x11, 0x37, 0x3b,
	// 	0x18, 0x2c, 0x88, 0x70, 0x59, 0x85, 0x54, 0xbd, 0x4a, 0x62,
	// 	0xab, 0x1a, 0xb0, 0x62, 0xe8, 0xdb, 0x3a, 0xcf, 0x80, 0x92,
	// 	0x71, 0x30, 0xff, 0x17, 0x11, 0x62, 0xd4, 0x94, 0xa3, 0x14,
	// 	0x6a, 0xf4, 0xe2, 0x81, 0xa8, 0x14, 0x1c, 0xdb, 0x25, 0x60,
	// 	0x4b, 0x56, 0x30, 0x80, 0xfb, 0x32, 0xa6, 0x33, 0x79, 0x8b,
	// 	0xe7, 0x81, 0x6b, 0xd1, 0xaa, 0x4f, 0xd7, 0xa7, 0x5f, 0xcd,
	// 	0x3a, 0x62, 0x11, 0xab, 0x72, 0x19, 0x46, 0xc8, 0xee, 0xc5,
	// 	0xa0, 0x66, 0x53, 0x26, 0xfd, 0x2e, 0x9c, 0x4b, 0x06, 0xbb,
	// 	0x56, 0x66, 0x6b, 0xb8, 0xaf, 0xa9, 0xdb, 0x54, 0x1e, 0x66,
	// 	0x17, 0xfb, 0x68, 0x1f, 0xb4, 0xc2,
	// }
	// ct := []byte{
	// 	0x6f, 0xf8, 0x0e, 0x2e, 0x3f, 0xe3, 0xf0, 0x9f, 0xfe, 0x48,
	// 	0x15, 0x4b, 0x13, 0xac, 0x14, 0x6c, 0xc5, 0x6c, 0x83, 0x3f,
	// 	0xab, 0x72, 0x04, 0x91, 0x86, 0xcb, 0xac, 0x48, 0x44, 0xbe,
	// 	0xf3, 0xcb, 0x33, 0xef, 0xde, 0x91, 0xe8, 0x40, 0xd3, 0xbe,
	// 	0xe6, 0x0c, 0x25, 0xfb, 0x8d, 0x00, 0xdf, 0x0f, 0xe9, 0xe3,
	// 	0x54, 0x1f, 0xea, 0x0b, 0xf3, 0x12, 0xa8, 0xa5, 0xb0, 0xb9,
	// 	0x29, 0xfd, 0x0b, 0x55, 0xbf, 0xa0, 0xa8, 0xac, 0x01, 0x3a,
	// 	0xf2, 0xd7, 0xce, 0x7c, 0xe6, 0x20, 0xc1, 0xc3, 0x66, 0x7c,
	// 	0x1d, 0x0a, 0x9f, 0x4e, 0x60, 0xda, 0x97, 0x2b, 0x67, 0xd6,
	// 	0x63, 0xb6, 0x2c, 0x34, 0x1c, 0x89, 0xff, 0xff, 0xa3, 0x0c,
	// 	0xd3, 0x44, 0x18, 0xdf, 0x23, 0x71, 0x94, 0x07, 0xfb, 0xf7,
	// 	0xef, 0xdc, 0xbf, 0xbb, 0x9a, 0xf5, 0xe8, 0xdc, 0xf9, 0xb9,
	// 	0x82, 0x79, 0xa7, 0x8e, 0x2b, 0x1d, 0x1a, 0xc6,
	// }
	// ct := []byte{
	// 	0x55, 0xd7, 0xe7, 0xb0, 0xe6, 0x83, 0xee, 0x72, 0xed, 0xe4,
	// 	0x70, 0xfb, 0xb7, 0x17, 0xf7, 0xd4, 0x0c, 0xf5, 0xf9, 0x29,
	// 	0x63, 0x38, 0xf4, 0x7d, 0xb5, 0x94, 0x48, 0xb8, 0xbc, 0xe5,
	// 	0x31, 0xe8, 0x53, 0x9b, 0x6f, 0x75, 0xec, 0x7c, 0x36, 0xd4,
	// 	0xfb, 0x9e, 0x65, 0x9c, 0x0c, 0xfd, 0x30, 0x67, 0x5c, 0x32,
	// 	0x7b, 0x1c, 0xf3, 0x10, 0xcc, 0x6a, 0x0e, 0x9b, 0xf3, 0x27,
	// 	0x4d, 0xcc, 0x5d, 0x25, 0xbe, 0x84, 0x94, 0x2d, 0x1b, 0x76,
	// 	0xd2, 0xb2, 0x57, 0x2b, 0x95, 0x71, 0x4f, 0x81, 0xef, 0x60,
	// 	0xe9, 0xbb, 0x98, 0x42, 0xca, 0x61, 0xcd, 0x5c, 0xf5, 0x6d,
	// 	0xea, 0x41, 0x6a, 0xc5, 0xb7, 0xd0, 0x30, 0x94, 0x93, 0xf3,
	// 	0x98, 0x44, 0x42, 0x76, 0x9c, 0xd0, 0xe3, 0x9e, 0x00, 0x1d,
	// 	0x7d, 0xab, 0x04, 0x98, 0x84, 0xbc, 0x6d, 0x91, 0xf9, 0x5b,
	// 	0x48, 0x03, 0x36, 0xa5, 0x8d, 0x21, 0x55, 0xe7,
	// }
	// ct := []byte{
	// 	0x1a, 0x46, 0x4b, 0x87, 0x02, 0x60, 0xf2, 0x64, 0xea, 0xd9,
	// 	0xec, 0x2e, 0x68, 0x01, 0xfb, 0xf7, 0xa1, 0xdf, 0x5c, 0xad,
	// 	0xc5, 0x25, 0xca, 0xa5, 0x49, 0xd9, 0xad, 0x34, 0x29, 0x3d,
	// 	0xfd, 0x85, 0x38, 0xd6, 0xeb, 0x82, 0xf3, 0x24, 0xa6, 0x5e,
	// 	0xdc, 0x27, 0xb8, 0x68, 0x50, 0xbf, 0xfe, 0x0a, 0xcf, 0xc7,
	// 	0x46, 0x19, 0x8d, 0x1f, 0x55, 0x63, 0x19, 0x8b, 0xdf, 0x2a,
	// 	0x01, 0xac, 0xfc, 0x8d, 0x59, 0xb9, 0xdc, 0xd8, 0x2d, 0xb8,
	// 	0x92, 0x84, 0x52, 0x45, 0x41, 0x25, 0x36, 0xfd, 0x7a, 0x71,
	// 	0x4b, 0x61, 0x94, 0x91, 0x3b, 0xfb, 0x59, 0x31, 0xe7, 0x49,
	// 	0x6d, 0xe9, 0x53, 0xee, 0xb4, 0x40, 0x0e, 0x37, 0x06, 0x97,
	// 	0x3d, 0x5e, 0x01, 0x0b, 0x03, 0x39, 0x5d, 0x3c, 0x5d, 0x8d,
	// 	0xe8, 0x6f, 0x2c, 0xe3, 0x06, 0x45, 0xa0, 0x24, 0x5a, 0x94,
	// 	0x17, 0xcd, 0xfe, 0x5f, 0x8e, 0xa6, 0xf6, 0xc4,
	// }
	ct := []byte{
		0x90, 0xba, 0x38, 0x9b, 0xeb, 0xc2, 0x8e, 0xa4, 0x3a, 0x3e,
		0x7a, 0xbe, 0x59, 0x87, 0xf4, 0x36, 0x8a, 0x94, 0x32, 0xed,
		0x60, 0x56, 0x97, 0x2d, 0xbf, 0xfb, 0x58, 0x04, 0xa0, 0x08,
		0x08, 0xb7, 0xba, 0x5e, 0xe4, 0xc6, 0x20, 0xd6, 0x31, 0xc9,
		0xd2, 0x63, 0xda, 0x27, 0xe0, 0x10, 0x9a, 0x4a, 0x54, 0x93,
		0xfd, 0x6f, 0x00, 0xae, 0x0c, 0x6f, 0x38, 0x1a, 0xe8, 0x03,
		0x05, 0x0c, 0x32, 0xb2, 0xf0, 0x6d, 0x43, 0x92, 0x48, 0xc4,
		0xd5, 0x2e, 0xff, 0x78, 0x29, 0x89, 0xa3, 0x41, 0x4c, 0xbf,
		0x1d, 0x0d, 0x31, 0x6e, 0x36, 0xe8, 0xe7, 0xf6, 0x83, 0xdf,
		0x76, 0xbd, 0x8c, 0xf9, 0x42, 0xcd, 0xce, 0xf7, 0x1f, 0xb4,
		0xf9, 0x7e, 0x21, 0xfe, 0x28, 0x5b, 0xed, 0xcf, 0x23, 0xb0,
		0xfd, 0x1b, 0x26, 0x24, 0xb9, 0x68, 0xb0, 0xfa, 0x9d, 0xa6,
		0xbf, 0x4a, 0x36, 0xa9, 0xb5, 0xb7, 0x09, 0x40,
	}
	// ct := []byte{
	// 	0x49, 0x5f, 0x8a, 0xe2, 0x9f, 0xf9, 0xb9, 0xc5, 0x5f, 0x04,
	// 	0x0b, 0x89, 0xc4, 0x20, 0x6a, 0x07, 0xb6, 0x88, 0xc2, 0x76,
	// 	0xeb, 0xd2, 0x9b, 0x5f, 0xbe, 0x3f, 0x65, 0x35, 0x6b, 0x6b,
	// 	0x0a, 0xb6, 0x8d, 0x0d, 0x81, 0x25, 0x2c, 0xe2, 0x98, 0x49,
	// 	0x4a, 0xed, 0xa4, 0xde, 0x1f, 0x32, 0xd8, 0x3f, 0xeb, 0x62,
	// 	0x63, 0xf2, 0x79, 0x95, 0xc6, 0x7b, 0x1e, 0xd5, 0x09, 0x73,
	// 	0xf1, 0x95, 0x68, 0x8d, 0x74, 0xba, 0x9d, 0x6b, 0x31, 0xc4,
	// 	0xc8, 0x38, 0x0b, 0xdc, 0x3d, 0xbf, 0x85, 0xf0, 0xe9, 0xed,
	// 	0xa2, 0xcc, 0x68, 0xa0, 0x69, 0x2b, 0x45, 0x08, 0xe2, 0x68,
	// 	0x44, 0xe4, 0xcf, 0x9a, 0xee, 0xa0, 0x7f, 0xfd, 0xc8, 0x44,
	// 	0x19, 0x94, 0xb5, 0x48, 0xc8, 0x4b, 0xa2, 0xe6, 0x50, 0x4b,
	// 	0x06, 0x38, 0x9c, 0xbc, 0x2e, 0xac, 0x42, 0x74, 0xb6, 0x89,
	// 	0x8a, 0xd8, 0x72, 0xb3, 0x09, 0xa9, 0xf6, 0x9c,
	// }
	// ct := []byte{
	// 	0x8f, 0x23, 0x90, 0xe1, 0xdf, 0x97, 0x78, 0xf5, 0x0a, 0x0e,
	// 	0xa6, 0x8f, 0xce, 0x41, 0xe3, 0x59, 0x9d, 0x8c, 0xba, 0xd7,
	// 	0xe2, 0xa7, 0x99, 0x40, 0x42, 0x0b, 0xd2, 0x65, 0x7f, 0x49,
	// 	0xd0, 0x2c, 0xd3, 0x17, 0xac, 0x53, 0xf7, 0xf1, 0xc2, 0x7f,
	// 	0x03, 0x3b, 0x19, 0xac, 0x4d, 0x38, 0x74, 0xb2, 0x59, 0xfc,
	// 	0xff, 0x9d, 0xef, 0x2c, 0xdb, 0x87, 0x92, 0xeb, 0x3a, 0xb9,
	// 	0x9b, 0x9a, 0x1b, 0x62, 0xcf, 0x6f, 0x37, 0x6a, 0x60, 0xe2,
	// 	0xfd, 0xbc, 0x2e, 0x31, 0xeb, 0xf9, 0x9f, 0x59, 0x0d, 0x63,
	// 	0xa6, 0xed, 0x0c, 0x1d, 0x2c, 0x3d, 0xd4, 0x05, 0x91, 0x06,
	// 	0xca, 0x1e, 0xee, 0x00, 0xcc, 0xc1, 0x42, 0xf1, 0x3a, 0xff,
	// 	0xf3, 0xac, 0xdc, 0x9f, 0xfe, 0x3c, 0xee, 0x32, 0x89, 0x30,
	// 	0x21, 0x6a, 0x33, 0x01, 0x5f, 0x59, 0xb2, 0x08, 0x3b, 0x2e,
	// 	0x09, 0x93, 0xad, 0x5c, 0xe2, 0xae, 0xcc, 0x7a,
	// }
	pt, err := key.Decrypt(rand.Reader, ct, nil)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(pt))
}
