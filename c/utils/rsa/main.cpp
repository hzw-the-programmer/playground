// rsa.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"

#include <string.h>
#include <stdlib.h>

#include "mbedtls/bignum.h"
#include "mbedtls/rsa.h"
#include "mbedtls/platform.h"

static int myrand(void *rng_state, unsigned char *output, size_t len);

int _tmain(int argc, _TCHAR* argv[])
{
    unsigned char buf_n[] = {
        0xab, 0x4a, 0xfb, 0x85, 0xcb, 0x17, 0xce, 0x79, 0x81, 0x53,
        0x6a, 0x80, 0x3e, 0x28, 0x8, 0x87, 0x8, 0xa, 0x88, 0x53,
        0xbd, 0x23, 0x97, 0x22, 0x11, 0x8e, 0x52, 0xd9, 0xfc, 0xb5,
        0x99, 0x6e, 0x5d, 0x5c, 0xa4, 0x4d, 0xf4, 0x70, 0xa2, 0x88,
        0x61, 0xc5, 0xaa, 0x63, 0xe6, 0x9a, 0xf7, 0xf4, 0x8c, 0x4,
        0xa6, 0xbb, 0x76, 0x83, 0xaa, 0x41, 0xc2, 0x26, 0x94, 0xcd,
        0x9d, 0x55, 0x0, 0x7f, 0xe1, 0xff, 0xfb, 0xbd, 0x85, 0x77,
        0xb4, 0x69, 0x18, 0x7e, 0xa9, 0x48, 0xa3, 0x21, 0x27, 0x4f,
        0x7a, 0x9d, 0x32, 0xc3, 0xb6, 0x9b, 0x39, 0x68, 0xb8, 0x76,
        0x10, 0xba, 0x84, 0x86, 0xd1, 0xec, 0x1, 0xcc, 0xca, 0x1f,
        0xc1, 0x4a, 0x5a, 0xb9, 0x20, 0x99, 0x8d, 0x39, 0xf3, 0xae,
        0x5d, 0x11, 0x7c, 0x23, 0x27, 0x52, 0x95, 0x52, 0x5c, 0x89,
        0x0, 0x8a, 0x89, 0xea, 0xd0, 0xc2, 0x45, 0x7f
    };
    unsigned char buf_e[] = {
        0x1, 0x0, 0x1
    };
    char *pt = "hello new world!";
    unsigned char ct[4096] = {0};
    
    mbedtls_mpi N, E;
    mbedtls_rsa_context rsa;
    int ret = 1;

    mbedtls_platform_set_calloc_free(calloc, free);
    
    mbedtls_mpi_init(&N);
    mbedtls_mpi_init(&E);

    mbedtls_mpi_read_binary(&N, buf_n, sizeof(buf_n));
    mbedtls_mpi_read_binary(&E, buf_e, sizeof(buf_e));

    mbedtls_rsa_init(&rsa, MBEDTLS_RSA_PKCS_V15, 0);
    ret = mbedtls_rsa_import(&rsa, &N, NULL, NULL, NULL, &E);
    ret = mbedtls_rsa_pkcs1_encrypt(&rsa, myrand,
                                     0, MBEDTLS_RSA_PUBLIC,
                                     strlen(pt), (unsigned char*)pt, ct);
    for (ret = 0; ret < rsa.len; ret++) {
        printf("0x%02x, ", ct[ret]);
        if (ret % 10 == 9) {
            printf("\n");
        }
    }

	return 0;
}

static int myrand(void *rng_state, unsigned char *output, size_t len)
{
#if !defined(__OpenBSD__)
    size_t i;

    if( rng_state != NULL )
        rng_state  = NULL;

    for( i = 0; i < len; ++i )
        output[i] = rand();
#else
    if( rng_state != NULL )
        rng_state = NULL;

    arc4random_buf( output, len );
#endif /* !OpenBSD */

    return( 0 );
}
