// 2271. Maximum White Tiles Covered by a Carpet

use crate::Solution;

impl Solution {
    pub fn maximum_white_tiles(mut tiles: Vec<Vec<i32>>, carpet_len: i32) -> i32 {
        tiles.sort_by_key(|p| p[0]);

        let mut right = 0;
        let mut covered = 0;
        let len = tiles.len();
        let mut res = 0;

        // 地毯匹配p的左端
        for left in 0..len {
            let end = tiles[left][0] + carpet_len;
            if end <= tiles[left][1] + 1 {
                return carpet_len;
            }

            while right < len && end > tiles[right][1] {
                covered += tiles[right][1] - tiles[right][0] + 1;
                right += 1;
            }

            if right == len {
                return res.max(covered);
            }

            let extra = 0.max(end - tiles[right][0]);
            res = res.max(covered + extra);

            covered -= tiles[left][1] - tiles[left][0] + 1;
        }

        res
    }

    /*
        // 地毯左边与每一段左边匹配
        // 该算法不能保证每一段都穷举了，left不是连续的
        pub fn maximum_white_tiles(tiles: Vec<Vec<i32>>, carpet_len: i32) -> i32 {
            let mut tiles = tiles;
            tiles.sort_by_key(|p| p[0]);

            let mut left = 0;
            let mut covered = 0;
            let mut res = 0;

            for p in tiles.iter() {
                covered += p[1] - p[0] + 1;

                let pre = left;
                while tiles[left][0] + carpet_len - 1 < p[0] {
                    covered -= tiles[left][1] - tiles[left][0] + 1;
                    left += 1;
                }
                if left - pre > 1 {
                    println!("gap");
                }

                let uncovered = if tiles[left][0] + carpet_len - 1 < p[1] {
                    p[1] - (tiles[left][0] + carpet_len - 1)
                } else {
                    0
                };

                res = res.max(covered - uncovered);
            }

            res
        }

        pub fn maximum_white_tiles1(tiles: Vec<Vec<i32>>, carpet_len: i32) -> i32 {
            let mut tiles = tiles;
            tiles.sort_by_key(|p| p[0]);

            let mut left = 0;
            let mut covered = 0;
            let mut res = 0;
            let mut first = false;

            for (i, p) in tiles.iter().enumerate() {
                covered += p[1] - p[0] + 1;

                if i == 421 {
                    println!("{i} = {p:?}");
                }

                // if left == 26 {
                //     println!("{}", tiles[left][0] + carpet_len - 1);
                //     println!("{i} = {p:?}");
                // }
                // if i == 412 {
                //     // i == 412 16 = [52150, 52150]
                //     //          412 = [72699, 72748]
                //     // i == 413 17 = [52176, 52215]
                //     println!("{left} = {:?}", tiles[left]);
                //     println!("{i} = {p:?}");
                // }

                while tiles[left][0] + carpet_len - 1 < p[0] {
                    covered -= tiles[left][1] - tiles[left][0] + 1;
                    left += 1;
                    if i == 421 {
                        println!("{left} = {:?}", tiles[left]);
                        println!("{i} = {p:?}");
                    }
                }
                // if i == 412 {
                //     println!("{left} = {:?}", tiles[left]);
                // }

                let uncovered = if tiles[left][0] + carpet_len - 1 < p[1] {
                    p[1] - (tiles[left][0] + carpet_len - 1)
                } else {
                    0
                };

                res = res.max(covered - uncovered);
                if res == 10702 && !first {
                    first = true;
                    println!();
                    println!("{left} = {:?}", tiles[left]);
                    println!("{i} = {p:?}");
                    println!("{covered}, {uncovered}");
                    println!();
                    // 26 = [52553, 52570]
                    // 420 = [73065, 73106]
                    // 10727, 25
                }
            }

            res
        }

        pub fn maximum_white_tiles2(tiles: Vec<Vec<i32>>, carpet_len: i32) -> i32 {
            let mut tiles = tiles;
            tiles.sort_by_key(|p| p[0]);

            let mut left = 0;
            let mut covered = 0;
            let mut res = 0;
            let mut first = false;

            for (i, p) in tiles.iter().enumerate() {
                covered += p[1] - p[0] + 1;

                if i == 412 {
                    // i == 412 16 = [52150, 52150]
                    // i == 413 18 = [52252, 52269]
                    println!("{left} = {:?}", tiles[left]);
                    println!("{i} = {p:?}");
                }

                while tiles[left][1] < p[1] - carpet_len + 1 {
                    covered -= tiles[left][1] - tiles[left][0] + 1;
                    left += 1;
                    if i == 412 {
                        println!("{left} = {:?}", tiles[left]);
                        println!("{i} = {p:?}");
                    }
                }
                if i == 412 {
                    println!("{left} = {:?}", tiles[left]);
                }

                let uncovered = if tiles[left][0] < p[1] - carpet_len + 1 {
                    p[1] - carpet_len + 1 - tiles[left][0]
                } else {
                    0
                };

                res = res.max(covered - uncovered);
                if res == 10709 && !first {
                    first = true;
                    println!();
                    println!("{left} = {:?}", tiles[left]);
                    println!("{i} = {p:?}");
                    println!("{covered}, {uncovered}");
                    println!();
                    // 27 = [52578, 52605]
                    // 420 = [73065, 73106]
                    // 10709, 0
                }
            }

            res
        }
    */
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_maximum_white_tile_1() {
        assert_eq!(
            Solution::maximum_white_tiles(
                vec![
                    vec![1, 5],
                    vec![10, 11],
                    vec![12, 18],
                    vec![20, 25],
                    vec![30, 32]
                ],
                10
            ),
            9
        );

        assert_eq!(
            Solution::maximum_white_tiles(vec![vec![10, 11], vec![1, 1]], 2),
            2
        );

        assert_eq!(
            Solution::maximum_white_tiles(
                vec![
                    vec![1, 5],
                    vec![10, 11],
                    vec![12, 18],
                    vec![20, 25],
                    vec![30, 32]
                ],
                1
            ),
            1
        );
    }

    #[test]
    fn test_maximum_white_tile_2() {
        let case = [
            [80580, 80593],
            [69663, 69666],
            [78718, 78731],
            [73694, 73694],
            [51903, 51932],
            [80075, 80086],
            [60051, 60072],
            [52798, 52807],
            [70917, 70924],
            [75867, 75877],
            [60831, 60862],
            [76369, 76411],
            [52150, 52150],
            [65898, 65906],
            [69598, 69647],
            [76248, 76282],
            [64255, 64299],
            [70136, 70153],
            [58156, 58187],
            [78152, 78169],
            [83458, 83491],
            [81354, 81380],
            [56475, 56501],
            [66317, 66355],
            [57875, 57905],
            [82895, 82909],
            [84104, 84148],
            [77268, 77276],
            [61180, 61230],
            [55500, 55539],
            [53620, 53659],
            [56005, 56050],
            [59613, 59625],
            [60625, 60654],
            [70940, 70961],
            [61376, 61402],
            [60115, 60123],
            [71563, 71608],
            [59932, 59949],
            [64079, 64084],
            [74328, 74334],
            [64372, 64388],
            [71717, 71730],
            [60312, 60360],
            [59086, 59124],
            [76943, 76966],
            [84761, 84804],
            [83752, 83798],
            [74935, 74937],
            [58508, 58554],
            [60446, 60471],
            [68048, 68053],
            [80868, 80873],
            [58297, 58301],
            [84847, 84886],
            [55174, 55179],
            [76289, 76324],
            [82193, 82241],
            [83872, 83911],
            [62164, 62188],
            [85371, 85413],
            [78330, 78338],
            [84011, 84052],
            [62642, 62649],
            [56579, 56627],
            [69016, 69051],
            [52845, 52894],
            [74715, 74715],
            [77407, 77410],
            [64128, 64158],
            [67690, 67726],
            [66152, 66189],
            [62255, 62277],
            [79538, 79573],
            [83297, 83346],
            [59550, 59579],
            [57238, 57242],
            [60570, 60574],
            [54547, 54583],
            [62078, 62122],
            [66574, 66615],
            [79392, 79440],
            [63999, 64045],
            [69242, 69248],
            [72503, 72542],
            [69673, 69713],
            [72865, 72908],
            [67503, 67534],
            [77939, 77970],
            [78536, 78577],
            [56067, 56093],
            [76753, 76770],
            [69801, 69844],
            [59196, 59235],
            [56319, 56326],
            [67316, 67362],
            [70070, 70110],
            [56263, 56286],
            [56896, 56933],
            [74887, 74908],
            [75553, 75574],
            [73266, 73315],
            [81292, 81292],
            [67643, 67643],
            [52433, 52459],
            [82772, 82808],
            [69746, 69779],
            [51419, 51437],
            [75485, 75497],
            [70178, 70222],
            [84985, 84992],
            [63422, 63452],
            [83802, 83845],
            [75701, 75748],
            [69070, 69099],
            [60726, 60728],
            [74854, 74863],
            [52275, 52322],
            [62313, 62314],
            [51774, 51797],
            [61846, 61878],
            [71865, 71903],
            [72021, 72042],
            [53486, 53490],
            [59501, 59510],
            [71250, 71284],
            [81152, 81184],
            [73399, 73413],
            [72815, 72819],
            [79642, 79685],
            [52024, 52045],
            [70806, 70839],
            [82554, 82593],
            [75050, 75050],
            [51675, 51679],
            [79819, 79853],
            [64759, 64778],
            [79245, 79294],
            [73558, 73561],
            [52747, 52776],
            [64177, 64214],
            [85101, 85112],
            [54113, 54124],
            [66391, 66401],
            [80517, 80538],
            [55139, 55159],
            [79732, 79749],
            [69253, 69271],
            [56515, 56531],
            [71925, 71939],
            [80877, 80921],
            [70747, 70764],
            [62744, 62765],
            [80434, 80450],
            [62508, 62534],
            [61914, 61926],
            [72577, 72609],
            [64508, 64516],
            [82100, 82102],
            [84679, 84720],
            [83963, 84009],
            [75515, 75532],
            [73948, 73992],
            [67995, 68005],
            [51407, 51410],
            [70229, 70233],
            [62885, 62907],
            [75433, 75462],
            [68184, 68193],
            [80026, 80055],
            [81935, 81952],
            [82414, 82459],
            [51687, 51723],
            [71526, 71560],
            [55323, 55372],
            [77367, 77378],
            [82133, 82164],
            [82665, 82689],
            [56975, 56980],
            [55644, 55686],
            [62810, 62859],
            [73903, 73918],
            [66529, 66542],
            [54368, 54394],
            [56246, 56254],
            [67131, 67180],
            [61688, 61737],
            [73879, 73896],
            [72970, 73018],
            [66436, 66458],
            [73187, 73192],
            [67584, 67620],
            [63776, 63822],
            [55905, 55955],
            [63525, 63574],
            [83271, 83273],
            [83712, 83716],
            [69386, 69411],
            [52497, 52525],
            [53110, 53131],
            [55583, 55607],
            [80182, 80195],
            [63164, 63197],
            [71053, 71067],
            [61100, 61137],
            [74648, 74698],
            [54399, 54445],
            [54827, 54855],
            [57951, 57958],
            [56180, 56226],
            [80933, 80954],
            [59310, 59332],
            [70457, 70494],
            [55700, 55726],
            [53787, 53824],
            [84485, 84486],
            [75612, 75625],
            [81602, 81629],
            [68741, 68759],
            [72770, 72790],
            [70039, 70045],
            [58731, 58773],
            [66246, 66266],
            [63022, 63038],
            [83609, 83610],
            [84438, 84452],
            [72837, 72855],
            [81654, 81678],
            [65933, 65967],
            [75099, 75118],
            [70003, 70018],
            [75799, 75826],
            [78958, 79000],
            [63338, 63369],
            [68086, 68091],
            [63455, 63485],
            [74468, 74518],
            [61312, 61350],
            [71019, 71043],
            [78919, 78919],
            [80610, 80630],
            [58037, 58054],
            [52895, 52936],
            [76122, 76125],
            [84055, 84095],
            [63872, 63909],
            [71402, 71450],
            [77599, 77638],
            [69560, 69564],
            [61641, 61687],
            [76498, 76534],
            [74569, 74599],
            [68477, 68507],
            [57418, 57463],
            [84229, 84259],
            [81757, 81782],
            [59758, 59793],
            [58910, 58934],
            [78604, 78636],
            [78215, 78218],
            [59065, 59072],
            [75878, 75927],
            [74162, 74190],
            [60011, 60031],
            [68433, 68468],
            [83077, 83099],
            [59840, 59863],
            [61968, 61993],
            [73794, 73843],
            [68232, 68278],
            [57644, 57666],
            [66977, 66997],
            [84302, 84304],
            [71103, 71153],
            [80995, 81030],
            [81813, 81828],
            [60299, 60311],
            [69891, 69914],
            [51548, 51568],
            [66487, 66511],
            [83575, 83607],
            [63648, 63683],
            [76068, 76082],
            [77529, 77540],
            [75377, 75386],
            [77111, 77140],
            [72699, 72748],
            [82741, 82764],
            [71799, 71821],
            [54675, 54719],
            [64915, 64939],
            [59630, 59635],
            [56364, 56372],
            [66204, 66245],
            [77731, 77775],
            [64977, 65019],
            [79345, 79346],
            [59334, 59340],
            [79895, 79940],
            [51478, 51523],
            [72934, 72958],
            [74754, 74754],
            [52384, 52390],
            [65446, 65468],
            [68612, 68623],
            [59238, 59278],
            [81865, 81902],
            [59961, 60002],
            [56545, 56565],
            [74257, 74306],
            [68945, 68975],
            [52376, 52376],
            [72450, 72481],
            [85153, 85194],
            [84930, 84955],
            [58095, 58117],
            [59377, 59379],
            [65527, 65568],
            [62015, 62036],
            [53264, 53289],
            [65049, 65090],
            [82035, 82059],
            [68704, 68723],
            [57927, 57934],
            [80251, 80291],
            [69507, 69537],
            [57179, 57203],
            [72639, 72670],
            [69454, 69471],
            [73483, 73523],
            [51829, 51862],
            [52553, 52570],
            [83632, 83653],
            [53947, 53955],
            [61004, 61033],
            [57686, 57709],
            [58234, 58253],
            [74078, 74103],
            [55028, 55044],
            [61058, 61086],
            [53339, 53372],
            [82247, 82295],
            [82371, 82391],
            [82487, 82495],
            [53710, 53742],
            [85324, 85328],
            [53523, 53547],
            [69358, 69381],
            [58454, 58501],
            [79183, 79217],
            [59386, 59399],
            [83369, 83379],
            [79047, 79048],
            [68129, 68159],
            [64350, 64350],
            [52107, 52107],
            [67936, 67982],
            [56813, 56814],
            [80729, 80773],
            [53086, 53095],
            [55777, 55806],
            [74113, 74153],
            [82692, 82728],
            [77315, 77319],
            [51875, 51878],
            [66886, 66934],
            [81516, 81565],
            [64799, 64815],
            [58370, 58392],
            [80679, 80704],
            [83424, 83443],
            [58355, 58355],
            [71633, 71673],
            [73120, 73137],
            [65323, 65348],
            [57347, 57380],
            [54871, 54888],
            [57115, 57159],
            [66267, 66313],
            [74354, 74381],
            [76168, 76190],
            [62908, 62931],
            [85021, 85052],
            [84190, 84204],
            [84614, 84641],
            [73241, 73251],
            [64958, 64958],
            [64858, 64871],
            [57909, 57916],
            [76861, 76873],
            [70377, 70419],
            [76819, 76856],
            [59641, 59682],
            [77673, 77712],
            [80306, 80343],
            [79316, 79319],
            [64467, 64493],
            [65141, 65188],
            [85434, 85463],
            [74984, 74998],
            [83665, 83683],
            [80297, 80298],
            [77051, 77080],
            [79582, 79602],
            [82506, 82514],
            [81315, 81315],
            [80131, 80167],
            [64949, 64956],
            [83022, 83049],
            [59721, 59747],
            [83131, 83141],
            [75159, 75167],
            [66521, 66521],
            [51598, 51630],
            [53889, 53936],
            [69941, 69955],
            [77159, 77170],
            [65917, 65925],
            [56113, 56151],
            [65490, 65525],
            [53561, 53571],
            [76537, 76558],
            [77435, 77450],
            [73065, 73106],
            [70601, 70649],
            [82923, 82932],
            [53133, 53173],
            [81109, 81137],
            [57961, 58003],
            [75772, 75772],
            [78117, 78120],
            [56728, 56734],
            [52395, 52432],
            [63045, 63070],
            [76892, 76921],
            [68780, 68827],
            [78032, 78067],
            [74703, 74708],
            [63690, 63737],
            [75052, 75093],
            [54985, 55027],
            [54453, 54497],
            [57793, 57840],
            [68374, 68398],
            [67464, 67498],
            [65191, 65216],
            [73650, 73655],
            [66785, 66791],
            [83510, 83541],
            [55420, 55468],
            [58852, 58895],
            [66796, 66839],
            [68286, 68286],
            [68656, 68669],
            [52653, 52694],
            [54900, 54904],
            [53213, 53217],
            [56678, 56719],
            [75291, 75311],
            [64642, 64691],
            [69217, 69228],
            [73525, 73532],
            [70699, 70737],
            [79761, 79798],
            [62345, 62387],
            [52252, 52269],
            [58673, 58684],
            [72144, 72166],
            [68877, 68910],
            [54188, 54227],
            [63245, 63271],
            [75982, 75992],
            [71004, 71017],
            [54257, 54274],
            [66055, 66097],
            [80350, 80350],
            [61501, 61543],
            [60776, 60787],
            [66708, 66739],
            [82967, 83005],
            [58604, 58645],
            [54141, 54141],
            [58305, 58321],
            [74614, 74620],
            [85241, 85282],
            [83234, 83234],
            [70678, 70683],
            [61609, 61634],
            [61441, 61474],
            [79061, 79105],
            [58787, 58825],
            [65268, 65276],
            [68549, 68553],
            [52578, 52605],
            [53076, 53081],
            [78650, 78661],
            [54728, 54744],
            [52986, 53029],
            [62973, 62983],
            [78441, 78480],
            [53593, 53594],
            [72396, 72409],
            [65582, 65609],
            [62695, 62734],
            [78252, 78289],
            [65365, 65402],
            [76217, 76236],
            [53461, 53474],
            [75212, 75256],
            [64413, 64462],
            [65981, 66030],
            [55849, 55865],
            [82809, 82831],
            [71745, 71760],
            [57626, 57642],
            [60679, 60680],
            [78083, 78094],
            [63750, 63773],
            [62469, 62494],
            [75044, 75048],
            [63285, 63319],
            [74005, 74051],
            [72350, 72375],
            [72084, 72105],
            [52176, 52215],
            [59446, 59491],
            [52014, 52016],
            [52708, 52741],
            [55276, 55289],
            [64562, 64601],
            [60225, 60259],
            [79958, 79975],
            [70262, 70304],
            [71324, 71334],
            [55070, 55113],
            [67287, 67313],
            [54617, 54637],
            [77206, 77251],
            [60940, 60987],
            [58701, 58702],
            [78852, 78888],
            [82300, 82339],
            [73422, 73441],
            [74803, 74826],
            [53424, 53437],
            [65768, 65800],
            [56413, 56452],
            [78375, 78404],
            [59886, 59905],
            [54301, 54340],
            [78753, 78769],
            [77000, 77002],
            [77884, 77911],
            [71379, 71381],
            [59022, 59036],
            [54032, 54078],
            [75334, 75352],
            [70322, 70347],
            [76436, 76458],
            [62558, 62597],
            [62405, 62428],
            [79122, 79142],
            [71463, 71488],
            [61260, 61279],
            [56857, 56873],
            [73346, 73349],
            [71179, 71214],
            [78492, 78523],
            [74431, 74434],
            [80465, 80474],
            [63129, 63136],
            [60509, 60525],
            [65839, 65887],
            [67861, 67908],
            [77813, 77861],
            [78663, 78697],
            [77560, 77563],
            [67077, 67090],
            [65618, 65659],
            [76030, 76063],
            [64712, 64730],
            [81430, 81476],
            [80793, 80830],
            [66118, 66122],
            [63598, 63613],
            [60382, 60404],
            [55210, 55251],
            [57007, 57030],
            [76595, 76644],
            [57573, 57619],
            [77477, 77481],
            [57731, 57763],
            [74393, 74428],
            [53838, 53880],
            [67823, 67824],
            [53967, 53995],
            [77870, 77871],
            [72269, 72299],
            [75963, 75973],
            [83278, 83279],
            [75643, 75675],
            [69114, 69133],
            [53394, 53421],
            [81072, 81103],
            [81999, 82007],
            [67220, 67258],
            [58294, 58296],
            [83936, 83961],
            [54754, 54784],
            [66964, 66970],
            [60890, 60910],
            [60160, 60188],
            [67756, 67786],
            [68327, 68328],
            [57508, 57535],
            [58403, 58408],
            [72212, 72261],
            [81223, 81256],
            [59129, 59150],
            [80196, 80228],
            [73590, 73600],
            [57045, 57088],
            [73023, 73058],
            [52354, 52372],
            [84348, 84392],
            [70511, 70540],
            [81387, 81405],
            [69293, 69321],
            [83187, 83223],
            [66635, 66677],
            [63924, 63960],
            [78796, 78803],
            [74209, 74220],
            [58961, 58981],
            [81728, 81730],
            [82838, 82852],
            [73738, 73779],
            [57293, 57328],
            [77994, 78031],
            [70587, 70591],
            [67402, 67428],
            [54935, 54976],
            [67039, 67071],
            [71943, 71991],
            [52078, 52086],
            [69152, 69195],
            [80383, 80408],
            [68604, 68610],
            [76681, 76715],
            [80841, 80849],
            [78312, 78325],
            [56776, 56797],
            [63377, 63409],
            [77787, 77791],
            [55736, 55743],
            [70980, 70988],
            [61779, 61827],
            [62234, 62250],
            [84529, 84579],
            [84311, 84344],
            [79487, 79506],
            [70859, 70894],
            [58324, 58343],
            [82631, 82649],
            [61588, 61607],
            [63109, 63111],
            [65704, 65732],
            [65228, 65267],
            [51938, 51982],
        ];

        let v: Vec<Vec<i32>> = case.iter().map(|p| vec![p[0], p[1]]).collect();
        assert_eq!(Solution::maximum_white_tiles(v, 20529), 10709);
    }
}
